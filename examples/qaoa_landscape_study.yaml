ZapOSApiVersion: v1alpha1
kind: Workflow

resources:
- name: z-quantum-core
  type: git
  parameters:
    url: "git@github.com:fredericsauv/z-quantum-core.git"
    branch: "master"
- name: z-quantum-qaoa
  type: git
  parameters:
    url: "git@github.com:fredericsauv/z-quantum-qaoa.git"
    branch: "master"
- name: z-quantum-optimizers
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "master"
- name: qe-qhipster
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-qhipster.git"
    branch: "master"
- name: qe-openfermion
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "master"

metadata:
  generateName: qaoa-landscape


# For P = 1 generate grid of parameters and evaluate the ansatz for these 
# parameters
spec:
  entrypoint: main
  arguments:
    parameters:
    - s3-bucket: quantum-engine
    - s3-key: projects/qaoa-study/
    - docker-image: z-quantum-default
    - docker-tag: latest

  templates:
  - name: main
    steps:

    # generate a graph 
    - - name: generate-graph
        template: generate-regular-graph
        arguments:
          parameters:
            - n-nodes: "10"
            - degre: "3"
            - resources: [z-quantum-core]
            - docker-image: "{{workflow.parameters.docker-image}}"
            - docker-tag: "{{workflow.parameters.docker-tag}}"
    
    # transform into an Hamiltonian
    - - name: get-maxcut-hamiltonian
        template: get-maxcut-hamiltonian
        arguments:
          parameters:
          - resources: [z-quantum-core, qe-openfermion, z-quantum-qaoa]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - graph:
              from: '{{steps.generate-graph.outputs.artifacts.graph}}'
              
    # build ansatz
    - - name: build-circuit-template
        template: build-farhi-qaoa-circuit-template
        arguments:
          parameters:
          - resources: [z-quantum-core, qe-openfermion, z-quantum-qaoa]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - hamiltonian:
              from: '{{steps.get-maxcut-hamiltonian.outputs.artifacts.hamiltonian}}'
              
    # generate parameters (later grid)
    - - name: generate-random-ansatz-params
        template: generate-random-ansatz-params
        arguments:
          parameters:
          - min-val: "0."
          - max-val: "3.14"
          - n-layers: "1"
          - resources: [z-quantum-core]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - ansatz:
              from: '{{steps.build-circuit-template.outputs.artifacts.ansatz}}'
                  
     # - - name: build-uniform-parameter-grid
     #    template: build-uniform-parameter-grid
     #    arguments:
     #      parameters:
     #      - n-layers: "1"
     #      - min-value: "0"
     #      - max-value: "3.14159265359+0.05" # to be changed to allow finer details
     #      - step: "0.1047197551"
     #      - resources: [z-quantum-core]
     #      - docker-image: "{{workflow.parameters.docker-image}}"
     #      - docker-tag: "{{workflow.parameters.docker-tag}}"
     #      artifacts:
     #      - ansatz:
     #          from: '{{steps.build-circuit-template.outputs.artifacts.ansatz}}'
   
   # compute the cost for these parameters
    - - name: evaluate-ansatz-from-params ## To write
        template: compute-cost
        arguments:
          parameters:
          - backend-specs: "{'module_name': 'qeqhipster.simulator', 'function_name': 'QHipsterSimulator'}"
          - resources: [z-quantum-core, qe-openfermion, z-quantum-optimizers, qe-qhipster, z-quantum-qaoa]
          - docker-image: qe-qhipster
          - docker-tag: latest
          artifacts:
          - ansatz: 
              from: '{{steps.build-circuit-template.outputs.artifacts.ansatz}}'
          - parameters:
              from: '{{steps.generate-random-ansatz-params.outputs.artifacts.params}}'
          - qubit-operator:
              from: '{{steps.get-maxcut-hamiltonian.outputs.artifacts.hamiltonian}}'
              
  